-- Haskell Playground 1.0
putStrLn (exclaim "Welcome to Haskell") -- Print to console

inc 41

exclaim "Haskell"


average 10 20       -- Legal
--average (10 20)   -- Illegal
(average 10) 20     -- Legal, left associative of function application
10 `average` 20     -- Legal, infix application
averagePair(10,20)  -- Legal, as desired





let sum :: Num a => [a] -> a  -- Use let to define function in GHCi
    sum = foldl (+) 0         -- Indentation is important here
sum [1..10] :: Int

let incList = map (+1)
incList [1..10]

-- Infix and Prefix Application
length ("Hello " ++ "World!")
length ((++) "Hello " "World!")


show True             -- Convert Boolean `True` to String `True`
show "True"           -- Get "\"True\""
--(show True) == True -- Error, cannot compare String with Boolean
--show inc            -- Error, inc is not an instance of `Show`
