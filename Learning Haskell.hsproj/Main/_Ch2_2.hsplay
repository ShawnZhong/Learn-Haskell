-- Haskell Playground 1.0

-- Lists
firstTenPrimes  = [2, 3, 5, 7, 11, 13, 17, 19, 23, 27]
oneToTwenty = [1..20]

let oddNumbers :: Int -> [Int]
    oddNumbers maxNumber  = [1, 3..maxNumber]
(oddNumbers 6) == [1, 3, 5]

-- `:` prepend
"ab" : "cd" :[] == ["ab", "cd"]
'a' : "bcd"     == "abcd"
--"abc" : 'd'   -- Error


-- `++` Join lists 
[4, 2, 3] ++ [3, 1, 2, 7] == [4, 2, 3, 3, 1, 2, 7]
"ab" ++ "cd"    == 'a' : "bcd"


-- `!!` Get element from list
[0, 1, 2, 3] !! 2 == 2
"Hello" !! 4      == 'o'


-- head and tail
--head []       -- Error
head ["a"] == "a"
head "a"   == 'a'
tail ["a"] == []
[] == ""
--tail ["a"] == "" -- Error, which is kinda interesting


-- length
length []        == 0
length ""        == 0
length [""]      == 1
length ([] : []) == 1


-- elem
elem 2 [0, 1, 2, 3]
elem 'o' "Hello"

-- sum, product, maximum, minimum
sum [1..100]
product [1..30]    -- High precision Integer
product [1..30.0]  -- Double

minimum ['a', 'A']          == 'A'
minimum "Shawn"             == 'S'
maximum ["Shawn", "Zhong"]  == "Zhong"


-- Throw error
error "Prelude.head: empty list" 

let x = a + b where a = 1 ; b = 2
let y = a + b where { a = 1 ; b = 2;;;;;;}
x == y